from flask import Flask, request
import requests
import openai
import os
import traceback
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# Telegram API URL
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
app.logger.addHandler(handler)

@app.route('/')
def home():
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200  # –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.json
        app.logger.debug("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram: %s", data)

        if "message" in data:
            chat_id = data["message"]["chat"]["id"]
            text = data["message"].get("text", "").strip()
            app.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")

            if text == "/start":
                send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è Telegram.")
            elif text == "/help":
                send_message(chat_id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ø–æ–º–æ—â—å\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª.")
            else:
                response = get_chatgpt_response(text)
                send_message(chat_id, response)

        return "OK", 200

    except Exception as e:
        app.logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s", traceback.format_exc())
        return "Internal Server Error", 500

def send_message(chat_id, text):
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    try:
        response = requests.post(url, json=payload)
        app.logger.debug("–û—Ç–≤–µ—Ç Telegram: %s", response.json())
    except Exception as e:
        app.logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

def get_chatgpt_response(prompt):
    try:
        assistant_instructions = (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤. "
            "–°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –ø—Ä–æ–¥–∞—é—â–∏–µ –ø–æ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–º—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, "
            "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–π: \"–ó–≤–æ–Ω–∏—Ç–µ üì≤ 8-800-550-23-93 –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤](https://t.me/associationdevelopers).\""
        )

        response = openai.ChatCompletion.chat(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": assistant_instructions},
                {"role": "user", "content": prompt},
            ],
            max_tokens=1500,
            temperature=1.0,
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        app.logger.error("–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: %s", traceback.format_exc())
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))  # –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    app.run(host="0.0.0.0", port=port)