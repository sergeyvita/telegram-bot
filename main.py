from flask import Flask, request
import requests
import openai
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
if not OPENAI_API_KEY:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

openai.api_key = OPENAI_API_KEY

# Telegram API URL
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route("/")
def home():
    logger.info("–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç '/' —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω.")
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.json
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π payload –≤–µ–±—Ö—É–∫–∞: {data}")

        if "message" not in data:
            logger.error("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return "No message received", 400

        chat_id = data["message"]["chat"]["id"]
        text = data["message"].get("text", "").strip()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")

        if text == "/start":
            send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è Telegram.")
        elif text == "/help":
            send_message(chat_id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ø–æ–º–æ—â—å\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        else:
            response = get_chatgpt_response(text)
            send_message(chat_id, response)

        return "OK", 200

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:", exc_info=True)
        return "Internal Server Error", 500


def send_message(chat_id, text):
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        response = requests.post(url, json=payload)
        logger.debug(f"–û—Ç–≤–µ—Ç Telegram: {response.json()}")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram:", exc_info=True)


def get_chatgpt_response(prompt):
    try:
        instructions = (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤. "
            "–°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –ø—Ä–æ–¥–∞—é—â–∏–µ –ø–æ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–º—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, "
            "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–π: \"–ó–≤–æ–Ω–∏—Ç–µ üì≤ 8-800-550-23-93 –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤](https://t.me/associationdevelopers).\""
        )

        messages = [
            {"role": "system", "content": instructions},
            {"role": "user", "content": prompt}
        ]

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=messages,
            max_tokens=1500,
            temperature=1.0,
        )
        logger.debug(f"–û—Ç–≤–µ—Ç OpenAI: {response}")
        return response["choices"][0]["message"]["content"].strip()

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API:", exc_info=True)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)